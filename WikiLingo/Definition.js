/* parser generated by jison 0.4.6 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Definition = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"wiki":3,"lines":4,"EOF":5,"line":6,"contents":7,"PRE_BLOCK_START":8,"BLOCK_START":9,"BLOCK_END":10,"content":11,"CONTENT":12,"COMMENT":13,"NO_PARSE_START":14,"NO_PARSE_END":15,"PREFORMATTED_TEXT_START":16,"PREFORMATTED_TEXT_END":17,"DOUBLE_DYNAMIC_VAR":18,"SINGLE_DYNAMIC_VAR":19,"ARGUMENT_VAR":20,"HTML_TAG":21,"HORIZONTAL_BAR":22,"BOLD_START":23,"BOLD_END":24,"BOX_START":25,"BOX_END":26,"CENTER_START":27,"CENTER_END":28,"CODE_START":29,"CODE_END":30,"COLOR_START":31,"COLOR_END":32,"ITALIC_START":33,"ITALIC_END":34,"UNLINK_START":35,"UNLINK_END":36,"LINK_START":37,"LINK_END":38,"STRIKE_START":39,"STRIKE_END":40,"DOUBLE_DASH":41,"TABLE_START":42,"TABLE_END":43,"TITLE_BAR_START":44,"TITLE_BAR_END":45,"UNDERSCORE_START":46,"UNDERSCORE_END":47,"WIKI_LINK_START":48,"WIKI_LINK_END":49,"WIKI_LINK":50,"INLINE_PLUGIN_START":51,"INLINE_PLUGIN_PARAMETERS":52,"PLUGIN_START":53,"PLUGIN_PARAMETERS":54,"PLUGIN_END":55,"LINE_END":56,"FORCED_LINE_END":57,"CHAR":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PRE_BLOCK_START",9:"BLOCK_START",10:"BLOCK_END",12:"CONTENT",13:"COMMENT",14:"NO_PARSE_START",15:"NO_PARSE_END",16:"PREFORMATTED_TEXT_START",17:"PREFORMATTED_TEXT_END",18:"DOUBLE_DYNAMIC_VAR",19:"SINGLE_DYNAMIC_VAR",20:"ARGUMENT_VAR",21:"HTML_TAG",22:"HORIZONTAL_BAR",23:"BOLD_START",24:"BOLD_END",25:"BOX_START",26:"BOX_END",27:"CENTER_START",28:"CENTER_END",29:"CODE_START",30:"CODE_END",31:"COLOR_START",32:"COLOR_END",33:"ITALIC_START",34:"ITALIC_END",35:"UNLINK_START",36:"UNLINK_END",37:"LINK_START",38:"LINK_END",39:"STRIKE_START",40:"STRIKE_END",41:"DOUBLE_DASH",42:"TABLE_START",43:"TABLE_END",44:"TITLE_BAR_START",45:"TITLE_BAR_END",46:"UNDERSCORE_START",47:"UNDERSCORE_END",48:"WIKI_LINK_START",49:"WIKI_LINK_END",50:"WIKI_LINK",51:"INLINE_PLUGIN_START",52:"INLINE_PLUGIN_PARAMETERS",53:"PLUGIN_START",54:"PLUGIN_PARAMETERS",55:"PLUGIN_END",56:"LINE_END",57:"FORCED_LINE_END",58:"CHAR"},
productions_: [0,[3,1],[3,2],[3,1],[4,1],[4,2],[6,1],[6,3],[6,4],[6,2],[6,1],[7,1],[7,2],[11,1],[11,1],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,2],[11,3],[11,1],[11,1],[11,2],[11,4],[11,3],[11,2],[11,1],[11,1],[11,1],[11,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 	    return $$[$0];
 	
break;
case 2:
	    //js
		    return $$[$0-1];

		/*php
		    return $$[$0-1];
        */
	
break;
case 3:
        //js
            return $$[$0];

        /*php
            return $$[$0];
        */
    
break;
case 5:
        //js
            this.$ = $$[$0-1] + $$[$0];

        /*php
            $$[$0-1]->addLine($$[$0]);
        */
    
break;
case 7:
	    //js
	    this.$ = parser.block($$[$0-1]);

	    /*php
	        $$[$0-2]->setOption('Empty', 'true');
	        $$[$0-2]->setType('Block');
        */
	
break;
case 8:
        //js
            this.$ = parser.block($$[$0-2] + $$[$0-1]);

        /*php
            $type = $$[$0-3];
            $type->addArgument($$[$0-2]);
            $type->addArgument($$[$0-1]);

            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Block');
        */
    
break;
case 12:
		//js
		    this.$ = $$[$0-1] + $$[$0];

		/*php
			$$[$0-1]->addContent($$[$0]);
        */
	
break;
case 13:
	    //js
	        this.$ = $$[$0];

	    /*php
	        $$[$0]->setType('Content');
	    */
	
break;
case 14:
        //js
            this.$ = parser.comment($$[$0]);

        /*php
            $$[$0]->setType('Comment');
        */
    
break;
case 17:
        //js
            this.$ = parser.noParse($$[$0-1]);

        /*php
            $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('NoParse');
        */
    
break;
case 20:
        //js
            this.$ = parser.preFormattedText($$[$0-1]);

        /*php
            $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('PreFormattedText');
        */
    
break;
case 21:
        //js
            this.$ = parser.doubleDynamicVar($$[$0]);

        /*php
            $type =& $$[$0];
            $type->setOption('Double', true);
            $type->setType('DynamicVariable');
        */
    
break;
case 22:
        //js
            this.$ = parser.singleDynamicVar($$[$0]);

        /*php
            $$[$0]->setType('DynamicVariable');
        */
     
break;
case 23:
        //js
            this.$ = parser.argumentVar($$[$0]);

        /*php
            $$[$0]->setType('ArgumentVariable');
        */
    
break;
case 24:
        //js
            this.$ = parser.htmlTag($$[$0]);

        /*php
            $$[$0]->setType('Tag');
        */
    
break;
case 25:
		//js
		    this.$ = parser.hr();

		/*php
		    $$[$0]->setType('Row');
        */
	
break;
case 28:
		//js
		    this.$ = parser.bold($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Bold');
        */
	
break;
case 31:
		//js
		    this.$ = parser.box($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Box');
        */
	
break;
case 34:
		//js
		    this.$ = parser.center($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Center');
        */
	
break;
case 37:
		//js
		    this.$ = parser.code($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Code');
        */
	
break;
case 40:
		//js
		    this.$ = parser.color($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Color');
        */
	
break;
case 43:
		//js
		    this.$ = parser.italic($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Italic');
        */
	
break;
case 46:
		//js
		    this.$ = parser.unlink($$[$0-2] + $$[$0-1] + $$[$0]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Unlink');
        */
	
break;
case 49:
		//js
		    this.$ = parser.link($$[$0-2], $$[$0-1]);

		/*php
		    //type already set

		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
        */
	
break;
case 52:
		//js
		    this.$ = parser.strike($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Strike');
        */
	
break;
case 53:
        //js
            this.$ = parser.doubleDash();

        /*php
            $$[$0]->setType('DoubleDash');
        */
    
break;
case 56:
		//js
		    this.$ = parser.tableParser($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
            $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Table');
        */
	
break;
case 59:
		//js
		    this.$ = parser.titleBar($$[$0-1]);

		/*php
			$type =& $$[$0-2];
			$typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('TitleBar');
        */
	
break;
case 62:
		//js
		    this.$ = parser.underscore($$[$0-1]);

		/*php
		    $type =& $$[$0-2];
		    $typeChild =& $$[$0-1];
            $typeChild->setParent($type);
            $type->addChild($typeChild);
            $type->setType('Underscore');
        */
	
break;
case 65:
		//js
		    this.$ = parser.link($$[$0-2]['type'], $$[$0-1]);

		/*php
			//Type already set
			$type =& $$[$0-2];
			$typeChild =& $$[$0-1];
			$typeChild->setParent($type);
			$type->addChild($typeChild);
        */
	
break;
case 66:
        //js
            this.$ = parser.link('word', $$[$0]);

        /*php
            $type =& $$[$0];
            $type->addArgument($$[$0]);
            $type->setType('WordLink');

        */
    
break;
case 68:
 		//js
 		    this.$ = parser.plugin($$[$0-1], $$[$0]);

 		/*php
 		    $type =& $$[$0-1];
            $type->setOption('NoBody', true);
            $type->setOption('Inline', true);
            $type->addArgument($$[$0]);
            $type->setType('InlinePlugin');
        */
 	
break;
case 69:
 	    //js
 		    this.$ = parser.plugin($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);

 		/*php
 		    $type =& $$[$0-3];
 		    $type->addArgument($$[$0-2]);

 		    $typeChild = $$[$0-1];
 		    $typeChild->setParent($type);
 		    $type->addChild($typeChild);
 		    $type->setType('Plugin');
        */
 	
break;
case 70:
  		//js
  		    $$[$0-1].body = '';
            this.$ = parser.plugin($$[$0-2]);

        /*php
            $type =& $$[$0-2];
            $type->addArgument($$[$0-1]);
            $type->addArgument($$[$0]);
            $type->setType('Plugin');
        */
     
break;
case 73:
        //js
            this.$ = parser.line($$[$0]);

        /*php
            $$[$0]->setType('Line');
        */
    
break;
case 74:
        //js
            this.$ = parser.forcedLineEnd();

        /*php
            $$[$0]->setType('ForcedLine');
        */
    
break;
case 75:
        //js
            this.$ = parser.char($$[$0]);

        /*php
            $$[$0]->setType('Char');
        */
    
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:[1,6],11:7,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[3]},{1:[2,1],5:[1,37],6:38,7:5,8:[1,6],11:7,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,3]},{1:[2,4],5:[2,4],8:[2,4],12:[2,4],13:[2,4],14:[2,4],16:[2,4],18:[2,4],19:[2,4],20:[2,4],21:[2,4],22:[2,4],23:[2,4],25:[2,4],27:[2,4],29:[2,4],31:[2,4],33:[2,4],35:[2,4],37:[2,4],39:[2,4],41:[2,4],42:[2,4],44:[2,4],46:[2,4],48:[2,4],50:[2,4],51:[2,4],53:[2,4],56:[2,4],57:[2,4],58:[2,4]},{1:[2,6],5:[2,6],8:[2,6],11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,10],5:[2,10],8:[2,10],9:[1,40],12:[2,10],13:[2,10],14:[2,10],16:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],23:[2,10],25:[2,10],27:[2,10],29:[2,10],31:[2,10],33:[2,10],35:[2,10],37:[2,10],39:[2,10],41:[2,10],42:[2,10],44:[2,10],46:[2,10],48:[2,10],50:[2,10],51:[2,10],53:[2,10],56:[2,10],57:[2,10],58:[2,10]},{1:[2,11],5:[2,11],8:[2,11],10:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],29:[2,11],30:[2,11],31:[2,11],32:[2,11],33:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11],49:[2,11],50:[2,11],51:[2,11],53:[2,11],55:[2,11],56:[2,11],57:[2,11],58:[2,11]},{1:[2,13],5:[2,13],8:[2,13],10:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[2,13],30:[2,13],31:[2,13],32:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],53:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13]},{1:[2,14],5:[2,14],8:[2,14],10:[2,14],12:[2,14],13:[2,14],14:[2,14],15:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[2,14],30:[2,14],31:[2,14],32:[2,14],33:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],51:[2,14],53:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14]},{1:[2,15],5:[2,15],7:42,8:[2,15],10:[2,15],11:7,12:[1,8],13:[1,9],14:[1,10],15:[1,41],16:[1,11],17:[2,15],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,15],25:[1,18],26:[2,15],27:[1,19],28:[2,15],29:[1,20],30:[2,15],31:[1,21],32:[2,15],33:[1,22],34:[2,15],35:[1,23],36:[2,15],37:[1,24],38:[2,15],39:[1,25],40:[2,15],41:[1,26],42:[1,27],43:[2,15],44:[1,28],45:[2,15],46:[1,29],47:[2,15],48:[1,30],49:[2,15],50:[1,31],51:[1,32],53:[1,33],55:[2,15],56:[1,34],57:[1,35],58:[1,36]},{1:[2,18],5:[2,18],7:44,8:[2,18],10:[2,18],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,18],16:[1,11],17:[1,43],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,18],25:[1,18],26:[2,18],27:[1,19],28:[2,18],29:[1,20],30:[2,18],31:[1,21],32:[2,18],33:[1,22],34:[2,18],35:[1,23],36:[2,18],37:[1,24],38:[2,18],39:[1,25],40:[2,18],41:[1,26],42:[1,27],43:[2,18],44:[1,28],45:[2,18],46:[1,29],47:[2,18],48:[1,30],49:[2,18],50:[1,31],51:[1,32],53:[1,33],55:[2,18],56:[1,34],57:[1,35],58:[1,36]},{1:[2,21],5:[2,21],8:[2,21],10:[2,21],12:[2,21],13:[2,21],14:[2,21],15:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[2,21],31:[2,21],32:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21],38:[2,21],39:[2,21],40:[2,21],41:[2,21],42:[2,21],43:[2,21],44:[2,21],45:[2,21],46:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],53:[2,21],55:[2,21],56:[2,21],57:[2,21],58:[2,21]},{1:[2,22],5:[2,22],8:[2,22],10:[2,22],12:[2,22],13:[2,22],14:[2,22],15:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[2,22],30:[2,22],31:[2,22],32:[2,22],33:[2,22],34:[2,22],35:[2,22],36:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],42:[2,22],43:[2,22],44:[2,22],45:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],53:[2,22],55:[2,22],56:[2,22],57:[2,22],58:[2,22]},{1:[2,23],5:[2,23],8:[2,23],10:[2,23],12:[2,23],13:[2,23],14:[2,23],15:[2,23],16:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[2,23],30:[2,23],31:[2,23],32:[2,23],33:[2,23],34:[2,23],35:[2,23],36:[2,23],37:[2,23],38:[2,23],39:[2,23],40:[2,23],41:[2,23],42:[2,23],43:[2,23],44:[2,23],45:[2,23],46:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],51:[2,23],53:[2,23],55:[2,23],56:[2,23],57:[2,23],58:[2,23]},{1:[2,24],5:[2,24],8:[2,24],10:[2,24],12:[2,24],13:[2,24],14:[2,24],15:[2,24],16:[2,24],17:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[2,24],30:[2,24],31:[2,24],32:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24],38:[2,24],39:[2,24],40:[2,24],41:[2,24],42:[2,24],43:[2,24],44:[2,24],45:[2,24],46:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],53:[2,24],55:[2,24],56:[2,24],57:[2,24],58:[2,24]},{1:[2,25],5:[2,25],8:[2,25],10:[2,25],12:[2,25],13:[2,25],14:[2,25],15:[2,25],16:[2,25],17:[2,25],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[2,25],30:[2,25],31:[2,25],32:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[2,25],37:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],42:[2,25],43:[2,25],44:[2,25],45:[2,25],46:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],53:[2,25],55:[2,25],56:[2,25],57:[2,25],58:[2,25]},{1:[2,26],5:[2,26],7:46,8:[2,26],10:[2,26],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,26],16:[1,11],17:[2,26],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[1,45],25:[1,18],26:[2,26],27:[1,19],28:[2,26],29:[1,20],30:[2,26],31:[1,21],32:[2,26],33:[1,22],34:[2,26],35:[1,23],36:[2,26],37:[1,24],38:[2,26],39:[1,25],40:[2,26],41:[1,26],42:[1,27],43:[2,26],44:[1,28],45:[2,26],46:[1,29],47:[2,26],48:[1,30],49:[2,26],50:[1,31],51:[1,32],53:[1,33],55:[2,26],56:[1,34],57:[1,35],58:[1,36]},{1:[2,29],5:[2,29],7:48,8:[2,29],10:[2,29],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,29],16:[1,11],17:[2,29],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,29],25:[1,18],26:[1,47],27:[1,19],28:[2,29],29:[1,20],30:[2,29],31:[1,21],32:[2,29],33:[1,22],34:[2,29],35:[1,23],36:[2,29],37:[1,24],38:[2,29],39:[1,25],40:[2,29],41:[1,26],42:[1,27],43:[2,29],44:[1,28],45:[2,29],46:[1,29],47:[2,29],48:[1,30],49:[2,29],50:[1,31],51:[1,32],53:[1,33],55:[2,29],56:[1,34],57:[1,35],58:[1,36]},{1:[2,32],5:[2,32],7:50,8:[2,32],10:[2,32],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,32],16:[1,11],17:[2,32],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,32],25:[1,18],26:[2,32],27:[1,19],28:[1,49],29:[1,20],30:[2,32],31:[1,21],32:[2,32],33:[1,22],34:[2,32],35:[1,23],36:[2,32],37:[1,24],38:[2,32],39:[1,25],40:[2,32],41:[1,26],42:[1,27],43:[2,32],44:[1,28],45:[2,32],46:[1,29],47:[2,32],48:[1,30],49:[2,32],50:[1,31],51:[1,32],53:[1,33],55:[2,32],56:[1,34],57:[1,35],58:[1,36]},{1:[2,35],5:[2,35],7:52,8:[2,35],10:[2,35],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,35],16:[1,11],17:[2,35],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,35],25:[1,18],26:[2,35],27:[1,19],28:[2,35],29:[1,20],30:[1,51],31:[1,21],32:[2,35],33:[1,22],34:[2,35],35:[1,23],36:[2,35],37:[1,24],38:[2,35],39:[1,25],40:[2,35],41:[1,26],42:[1,27],43:[2,35],44:[1,28],45:[2,35],46:[1,29],47:[2,35],48:[1,30],49:[2,35],50:[1,31],51:[1,32],53:[1,33],55:[2,35],56:[1,34],57:[1,35],58:[1,36]},{1:[2,38],5:[2,38],7:54,8:[2,38],10:[2,38],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,38],16:[1,11],17:[2,38],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,38],25:[1,18],26:[2,38],27:[1,19],28:[2,38],29:[1,20],30:[2,38],31:[1,21],32:[1,53],33:[1,22],34:[2,38],35:[1,23],36:[2,38],37:[1,24],38:[2,38],39:[1,25],40:[2,38],41:[1,26],42:[1,27],43:[2,38],44:[1,28],45:[2,38],46:[1,29],47:[2,38],48:[1,30],49:[2,38],50:[1,31],51:[1,32],53:[1,33],55:[2,38],56:[1,34],57:[1,35],58:[1,36]},{1:[2,41],5:[2,41],7:56,8:[2,41],10:[2,41],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,41],16:[1,11],17:[2,41],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,41],25:[1,18],26:[2,41],27:[1,19],28:[2,41],29:[1,20],30:[2,41],31:[1,21],32:[2,41],33:[1,22],34:[1,55],35:[1,23],36:[2,41],37:[1,24],38:[2,41],39:[1,25],40:[2,41],41:[1,26],42:[1,27],43:[2,41],44:[1,28],45:[2,41],46:[1,29],47:[2,41],48:[1,30],49:[2,41],50:[1,31],51:[1,32],53:[1,33],55:[2,41],56:[1,34],57:[1,35],58:[1,36]},{1:[2,44],5:[2,44],7:58,8:[2,44],10:[2,44],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,44],16:[1,11],17:[2,44],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,44],25:[1,18],26:[2,44],27:[1,19],28:[2,44],29:[1,20],30:[2,44],31:[1,21],32:[2,44],33:[1,22],34:[2,44],35:[1,23],36:[1,57],37:[1,24],38:[2,44],39:[1,25],40:[2,44],41:[1,26],42:[1,27],43:[2,44],44:[1,28],45:[2,44],46:[1,29],47:[2,44],48:[1,30],49:[2,44],50:[1,31],51:[1,32],53:[1,33],55:[2,44],56:[1,34],57:[1,35],58:[1,36]},{1:[2,47],5:[2,47],7:60,8:[2,47],10:[2,47],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,47],16:[1,11],17:[2,47],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,47],25:[1,18],26:[2,47],27:[1,19],28:[2,47],29:[1,20],30:[2,47],31:[1,21],32:[2,47],33:[1,22],34:[2,47],35:[1,23],36:[2,47],37:[1,24],38:[1,59],39:[1,25],40:[2,47],41:[1,26],42:[1,27],43:[2,47],44:[1,28],45:[2,47],46:[1,29],47:[2,47],48:[1,30],49:[2,47],50:[1,31],51:[1,32],53:[1,33],55:[2,47],56:[1,34],57:[1,35],58:[1,36]},{1:[2,50],5:[2,50],7:62,8:[2,50],10:[2,50],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,50],16:[1,11],17:[2,50],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,50],25:[1,18],26:[2,50],27:[1,19],28:[2,50],29:[1,20],30:[2,50],31:[1,21],32:[2,50],33:[1,22],34:[2,50],35:[1,23],36:[2,50],37:[1,24],38:[2,50],39:[1,25],40:[1,61],41:[1,26],42:[1,27],43:[2,50],44:[1,28],45:[2,50],46:[1,29],47:[2,50],48:[1,30],49:[2,50],50:[1,31],51:[1,32],53:[1,33],55:[2,50],56:[1,34],57:[1,35],58:[1,36]},{1:[2,53],5:[2,53],8:[2,53],10:[2,53],12:[2,53],13:[2,53],14:[2,53],15:[2,53],16:[2,53],17:[2,53],18:[2,53],19:[2,53],20:[2,53],21:[2,53],22:[2,53],23:[2,53],24:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],30:[2,53],31:[2,53],32:[2,53],33:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],53:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53]},{1:[2,54],5:[2,54],7:64,8:[2,54],10:[2,54],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,54],16:[1,11],17:[2,54],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,54],25:[1,18],26:[2,54],27:[1,19],28:[2,54],29:[1,20],30:[2,54],31:[1,21],32:[2,54],33:[1,22],34:[2,54],35:[1,23],36:[2,54],37:[1,24],38:[2,54],39:[1,25],40:[2,54],41:[1,26],42:[1,27],43:[1,63],44:[1,28],45:[2,54],46:[1,29],47:[2,54],48:[1,30],49:[2,54],50:[1,31],51:[1,32],53:[1,33],55:[2,54],56:[1,34],57:[1,35],58:[1,36]},{1:[2,57],5:[2,57],7:66,8:[2,57],10:[2,57],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,57],16:[1,11],17:[2,57],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,57],25:[1,18],26:[2,57],27:[1,19],28:[2,57],29:[1,20],30:[2,57],31:[1,21],32:[2,57],33:[1,22],34:[2,57],35:[1,23],36:[2,57],37:[1,24],38:[2,57],39:[1,25],40:[2,57],41:[1,26],42:[1,27],43:[2,57],44:[1,28],45:[1,65],46:[1,29],47:[2,57],48:[1,30],49:[2,57],50:[1,31],51:[1,32],53:[1,33],55:[2,57],56:[1,34],57:[1,35],58:[1,36]},{1:[2,60],5:[2,60],7:68,8:[2,60],10:[2,60],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,60],16:[1,11],17:[2,60],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,60],25:[1,18],26:[2,60],27:[1,19],28:[2,60],29:[1,20],30:[2,60],31:[1,21],32:[2,60],33:[1,22],34:[2,60],35:[1,23],36:[2,60],37:[1,24],38:[2,60],39:[1,25],40:[2,60],41:[1,26],42:[1,27],43:[2,60],44:[1,28],45:[2,60],46:[1,29],47:[1,67],48:[1,30],49:[2,60],50:[1,31],51:[1,32],53:[1,33],55:[2,60],56:[1,34],57:[1,35],58:[1,36]},{1:[2,63],5:[2,63],7:70,8:[2,63],10:[2,63],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,63],16:[1,11],17:[2,63],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,63],25:[1,18],26:[2,63],27:[1,19],28:[2,63],29:[1,20],30:[2,63],31:[1,21],32:[2,63],33:[1,22],34:[2,63],35:[1,23],36:[2,63],37:[1,24],38:[2,63],39:[1,25],40:[2,63],41:[1,26],42:[1,27],43:[2,63],44:[1,28],45:[2,63],46:[1,29],47:[2,63],48:[1,30],49:[1,69],50:[1,31],51:[1,32],53:[1,33],55:[2,63],56:[1,34],57:[1,35],58:[1,36]},{1:[2,66],5:[2,66],8:[2,66],10:[2,66],12:[2,66],13:[2,66],14:[2,66],15:[2,66],16:[2,66],17:[2,66],18:[2,66],19:[2,66],20:[2,66],21:[2,66],22:[2,66],23:[2,66],24:[2,66],25:[2,66],26:[2,66],27:[2,66],28:[2,66],29:[2,66],30:[2,66],31:[2,66],32:[2,66],33:[2,66],34:[2,66],35:[2,66],36:[2,66],37:[2,66],38:[2,66],39:[2,66],40:[2,66],41:[2,66],42:[2,66],43:[2,66],44:[2,66],45:[2,66],46:[2,66],47:[2,66],48:[2,66],49:[2,66],50:[2,66],51:[2,66],53:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66]},{1:[2,67],5:[2,67],8:[2,67],10:[2,67],12:[2,67],13:[2,67],14:[2,67],15:[2,67],16:[2,67],17:[2,67],18:[2,67],19:[2,67],20:[2,67],21:[2,67],22:[2,67],23:[2,67],24:[2,67],25:[2,67],26:[2,67],27:[2,67],28:[2,67],29:[2,67],30:[2,67],31:[2,67],32:[2,67],33:[2,67],34:[2,67],35:[2,67],36:[2,67],37:[2,67],38:[2,67],39:[2,67],40:[2,67],41:[2,67],42:[2,67],43:[2,67],44:[2,67],45:[2,67],46:[2,67],47:[2,67],48:[2,67],49:[2,67],50:[2,67],51:[2,67],52:[1,71],53:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67]},{1:[2,72],5:[2,72],8:[2,72],10:[2,72],12:[2,72],13:[2,72],14:[2,72],15:[2,72],16:[2,72],17:[2,72],18:[2,72],19:[2,72],20:[2,72],21:[2,72],22:[2,72],23:[2,72],24:[2,72],25:[2,72],26:[2,72],27:[2,72],28:[2,72],29:[2,72],30:[2,72],31:[2,72],32:[2,72],33:[2,72],34:[2,72],35:[2,72],36:[2,72],37:[2,72],38:[2,72],39:[2,72],40:[2,72],41:[2,72],42:[2,72],43:[2,72],44:[2,72],45:[2,72],46:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],51:[2,72],53:[2,72],54:[1,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72]},{1:[2,73],5:[2,73],8:[2,73],10:[2,73],12:[2,73],13:[2,73],14:[2,73],15:[2,73],16:[2,73],17:[2,73],18:[2,73],19:[2,73],20:[2,73],21:[2,73],22:[2,73],23:[2,73],24:[2,73],25:[2,73],26:[2,73],27:[2,73],28:[2,73],29:[2,73],30:[2,73],31:[2,73],32:[2,73],33:[2,73],34:[2,73],35:[2,73],36:[2,73],37:[2,73],38:[2,73],39:[2,73],40:[2,73],41:[2,73],42:[2,73],43:[2,73],44:[2,73],45:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],51:[2,73],53:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73]},{1:[2,74],5:[2,74],8:[2,74],10:[2,74],12:[2,74],13:[2,74],14:[2,74],15:[2,74],16:[2,74],17:[2,74],18:[2,74],19:[2,74],20:[2,74],21:[2,74],22:[2,74],23:[2,74],24:[2,74],25:[2,74],26:[2,74],27:[2,74],28:[2,74],29:[2,74],30:[2,74],31:[2,74],32:[2,74],33:[2,74],34:[2,74],35:[2,74],36:[2,74],37:[2,74],38:[2,74],39:[2,74],40:[2,74],41:[2,74],42:[2,74],43:[2,74],44:[2,74],45:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],51:[2,74],53:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74]},{1:[2,75],5:[2,75],8:[2,75],10:[2,75],12:[2,75],13:[2,75],14:[2,75],15:[2,75],16:[2,75],17:[2,75],18:[2,75],19:[2,75],20:[2,75],21:[2,75],22:[2,75],23:[2,75],24:[2,75],25:[2,75],26:[2,75],27:[2,75],28:[2,75],29:[2,75],30:[2,75],31:[2,75],32:[2,75],33:[2,75],34:[2,75],35:[2,75],36:[2,75],37:[2,75],38:[2,75],39:[2,75],40:[2,75],41:[2,75],42:[2,75],43:[2,75],44:[2,75],45:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],51:[2,75],53:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75]},{1:[2,2]},{1:[2,5],5:[2,5],8:[2,5],12:[2,5],13:[2,5],14:[2,5],16:[2,5],18:[2,5],19:[2,5],20:[2,5],21:[2,5],22:[2,5],23:[2,5],25:[2,5],27:[2,5],29:[2,5],31:[2,5],33:[2,5],35:[2,5],37:[2,5],39:[2,5],41:[2,5],42:[2,5],44:[2,5],46:[2,5],48:[2,5],50:[2,5],51:[2,5],53:[2,5],56:[2,5],57:[2,5],58:[2,5]},{1:[2,12],5:[2,12],8:[2,12],10:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],29:[2,12],30:[2,12],31:[2,12],32:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],44:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],53:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12]},{1:[2,9],5:[2,9],7:74,8:[2,9],10:[1,73],11:7,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,16],5:[2,16],8:[2,16],10:[2,16],12:[2,16],13:[2,16],14:[2,16],15:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],30:[2,16],31:[2,16],32:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],42:[2,16],43:[2,16],44:[2,16],45:[2,16],46:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],53:[2,16],55:[2,16],56:[2,16],57:[2,16],58:[2,16]},{11:39,12:[1,8],13:[1,9],14:[1,10],15:[1,75],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,19],5:[2,19],8:[2,19],10:[2,19],12:[2,19],13:[2,19],14:[2,19],15:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[2,19],31:[2,19],32:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],37:[2,19],38:[2,19],39:[2,19],40:[2,19],41:[2,19],42:[2,19],43:[2,19],44:[2,19],45:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],53:[2,19],55:[2,19],56:[2,19],57:[2,19],58:[2,19]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],17:[1,76],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,27],5:[2,27],8:[2,27],10:[2,27],12:[2,27],13:[2,27],14:[2,27],15:[2,27],16:[2,27],17:[2,27],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[2,27],31:[2,27],32:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],42:[2,27],43:[2,27],44:[2,27],45:[2,27],46:[2,27],47:[2,27],48:[2,27],49:[2,27],50:[2,27],51:[2,27],53:[2,27],55:[2,27],56:[2,27],57:[2,27],58:[2,27]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[1,77],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,30],5:[2,30],8:[2,30],10:[2,30],12:[2,30],13:[2,30],14:[2,30],15:[2,30],16:[2,30],17:[2,30],18:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[2,30],31:[2,30],32:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],42:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30],49:[2,30],50:[2,30],51:[2,30],53:[2,30],55:[2,30],56:[2,30],57:[2,30],58:[2,30]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],26:[1,78],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,33],5:[2,33],8:[2,33],10:[2,33],12:[2,33],13:[2,33],14:[2,33],15:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[2,33],31:[2,33],32:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],42:[2,33],43:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],48:[2,33],49:[2,33],50:[2,33],51:[2,33],53:[2,33],55:[2,33],56:[2,33],57:[2,33],58:[2,33]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],28:[1,79],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,36],5:[2,36],8:[2,36],10:[2,36],12:[2,36],13:[2,36],14:[2,36],15:[2,36],16:[2,36],17:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],30:[2,36],31:[2,36],32:[2,36],33:[2,36],34:[2,36],35:[2,36],36:[2,36],37:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],42:[2,36],43:[2,36],44:[2,36],45:[2,36],46:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36],51:[2,36],53:[2,36],55:[2,36],56:[2,36],57:[2,36],58:[2,36]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],30:[1,80],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,39],5:[2,39],8:[2,39],10:[2,39],12:[2,39],13:[2,39],14:[2,39],15:[2,39],16:[2,39],17:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],30:[2,39],31:[2,39],32:[2,39],33:[2,39],34:[2,39],35:[2,39],36:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[2,39],53:[2,39],55:[2,39],56:[2,39],57:[2,39],58:[2,39]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],32:[1,81],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,42],5:[2,42],8:[2,42],10:[2,42],12:[2,42],13:[2,42],14:[2,42],15:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],31:[2,42],32:[2,42],33:[2,42],34:[2,42],35:[2,42],36:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],53:[2,42],55:[2,42],56:[2,42],57:[2,42],58:[2,42]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],34:[1,82],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,45],5:[2,45],8:[2,45],10:[2,45],12:[2,45],13:[2,45],14:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],31:[2,45],32:[2,45],33:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],51:[2,45],53:[2,45],55:[2,45],56:[2,45],57:[2,45],58:[2,45]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],36:[1,83],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,48],5:[2,48],8:[2,48],10:[2,48],12:[2,48],13:[2,48],14:[2,48],15:[2,48],16:[2,48],17:[2,48],18:[2,48],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],31:[2,48],32:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],51:[2,48],53:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],38:[1,84],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,51],5:[2,51],8:[2,51],10:[2,51],12:[2,51],13:[2,51],14:[2,51],15:[2,51],16:[2,51],17:[2,51],18:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],31:[2,51],32:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],53:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],40:[1,85],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,55],5:[2,55],8:[2,55],10:[2,55],12:[2,55],13:[2,55],14:[2,55],15:[2,55],16:[2,55],17:[2,55],18:[2,55],19:[2,55],20:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],30:[2,55],31:[2,55],32:[2,55],33:[2,55],34:[2,55],35:[2,55],36:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],42:[2,55],43:[2,55],44:[2,55],45:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],51:[2,55],53:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],43:[1,86],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,58],5:[2,58],8:[2,58],10:[2,58],12:[2,58],13:[2,58],14:[2,58],15:[2,58],16:[2,58],17:[2,58],18:[2,58],19:[2,58],20:[2,58],21:[2,58],22:[2,58],23:[2,58],24:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],29:[2,58],30:[2,58],31:[2,58],32:[2,58],33:[2,58],34:[2,58],35:[2,58],36:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],42:[2,58],43:[2,58],44:[2,58],45:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],51:[2,58],53:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],45:[1,87],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,61],5:[2,61],8:[2,61],10:[2,61],12:[2,61],13:[2,61],14:[2,61],15:[2,61],16:[2,61],17:[2,61],18:[2,61],19:[2,61],20:[2,61],21:[2,61],22:[2,61],23:[2,61],24:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],30:[2,61],31:[2,61],32:[2,61],33:[2,61],34:[2,61],35:[2,61],36:[2,61],37:[2,61],38:[2,61],39:[2,61],40:[2,61],41:[2,61],42:[2,61],43:[2,61],44:[2,61],45:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[2,61],51:[2,61],53:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],47:[1,88],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,64],5:[2,64],8:[2,64],10:[2,64],12:[2,64],13:[2,64],14:[2,64],15:[2,64],16:[2,64],17:[2,64],18:[2,64],19:[2,64],20:[2,64],21:[2,64],22:[2,64],23:[2,64],24:[2,64],25:[2,64],26:[2,64],27:[2,64],28:[2,64],29:[2,64],30:[2,64],31:[2,64],32:[2,64],33:[2,64],34:[2,64],35:[2,64],36:[2,64],37:[2,64],38:[2,64],39:[2,64],40:[2,64],41:[2,64],42:[2,64],43:[2,64],44:[2,64],45:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],51:[2,64],53:[2,64],55:[2,64],56:[2,64],57:[2,64],58:[2,64]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],49:[1,89],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,68],5:[2,68],8:[2,68],10:[2,68],12:[2,68],13:[2,68],14:[2,68],15:[2,68],16:[2,68],17:[2,68],18:[2,68],19:[2,68],20:[2,68],21:[2,68],22:[2,68],23:[2,68],24:[2,68],25:[2,68],26:[2,68],27:[2,68],28:[2,68],29:[2,68],30:[2,68],31:[2,68],32:[2,68],33:[2,68],34:[2,68],35:[2,68],36:[2,68],37:[2,68],38:[2,68],39:[2,68],40:[2,68],41:[2,68],42:[2,68],43:[2,68],44:[2,68],45:[2,68],46:[2,68],47:[2,68],48:[2,68],49:[2,68],50:[2,68],51:[2,68],53:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68]},{1:[2,71],5:[2,71],7:90,8:[2,71],10:[2,71],11:7,12:[1,8],13:[1,9],14:[1,10],15:[2,71],16:[1,11],17:[2,71],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],24:[2,71],25:[1,18],26:[2,71],27:[1,19],28:[2,71],29:[1,20],30:[2,71],31:[1,21],32:[2,71],33:[1,22],34:[2,71],35:[1,23],36:[2,71],37:[1,24],38:[2,71],39:[1,25],40:[2,71],41:[1,26],42:[1,27],43:[2,71],44:[1,28],45:[2,71],46:[1,29],47:[2,71],48:[1,30],49:[2,71],50:[1,31],51:[1,32],53:[1,33],55:[1,91],56:[1,34],57:[1,35],58:[1,36]},{1:[2,7],5:[2,7],8:[2,7],12:[2,7],13:[2,7],14:[2,7],16:[2,7],18:[2,7],19:[2,7],20:[2,7],21:[2,7],22:[2,7],23:[2,7],25:[2,7],27:[2,7],29:[2,7],31:[2,7],33:[2,7],35:[2,7],37:[2,7],39:[2,7],41:[2,7],42:[2,7],44:[2,7],46:[2,7],48:[2,7],50:[2,7],51:[2,7],53:[2,7],56:[2,7],57:[2,7],58:[2,7]},{10:[1,92],11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],56:[1,34],57:[1,35],58:[1,36]},{1:[2,17],5:[2,17],8:[2,17],10:[2,17],12:[2,17],13:[2,17],14:[2,17],15:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[2,17],31:[2,17],32:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],37:[2,17],38:[2,17],39:[2,17],40:[2,17],41:[2,17],42:[2,17],43:[2,17],44:[2,17],45:[2,17],46:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],53:[2,17],55:[2,17],56:[2,17],57:[2,17],58:[2,17]},{1:[2,20],5:[2,20],8:[2,20],10:[2,20],12:[2,20],13:[2,20],14:[2,20],15:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[2,20],31:[2,20],32:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],38:[2,20],39:[2,20],40:[2,20],41:[2,20],42:[2,20],43:[2,20],44:[2,20],45:[2,20],46:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],53:[2,20],55:[2,20],56:[2,20],57:[2,20],58:[2,20]},{1:[2,28],5:[2,28],8:[2,28],10:[2,28],12:[2,28],13:[2,28],14:[2,28],15:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[2,28],31:[2,28],32:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],42:[2,28],43:[2,28],44:[2,28],45:[2,28],46:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28],51:[2,28],53:[2,28],55:[2,28],56:[2,28],57:[2,28],58:[2,28]},{1:[2,31],5:[2,31],8:[2,31],10:[2,31],12:[2,31],13:[2,31],14:[2,31],15:[2,31],16:[2,31],17:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],30:[2,31],31:[2,31],32:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31],38:[2,31],39:[2,31],40:[2,31],41:[2,31],42:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31],51:[2,31],53:[2,31],55:[2,31],56:[2,31],57:[2,31],58:[2,31]},{1:[2,34],5:[2,34],8:[2,34],10:[2,34],12:[2,34],13:[2,34],14:[2,34],15:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[2,34],31:[2,34],32:[2,34],33:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[2,34],51:[2,34],53:[2,34],55:[2,34],56:[2,34],57:[2,34],58:[2,34]},{1:[2,37],5:[2,37],8:[2,37],10:[2,37],12:[2,37],13:[2,37],14:[2,37],15:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],30:[2,37],31:[2,37],32:[2,37],33:[2,37],34:[2,37],35:[2,37],36:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],42:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],51:[2,37],53:[2,37],55:[2,37],56:[2,37],57:[2,37],58:[2,37]},{1:[2,40],5:[2,40],8:[2,40],10:[2,40],12:[2,40],13:[2,40],14:[2,40],15:[2,40],16:[2,40],17:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],30:[2,40],31:[2,40],32:[2,40],33:[2,40],34:[2,40],35:[2,40],36:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],53:[2,40],55:[2,40],56:[2,40],57:[2,40],58:[2,40]},{1:[2,43],5:[2,43],8:[2,43],10:[2,43],12:[2,43],13:[2,43],14:[2,43],15:[2,43],16:[2,43],17:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],31:[2,43],32:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43],53:[2,43],55:[2,43],56:[2,43],57:[2,43],58:[2,43]},{1:[2,46],5:[2,46],8:[2,46],10:[2,46],12:[2,46],13:[2,46],14:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],31:[2,46],32:[2,46],33:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],51:[2,46],53:[2,46],55:[2,46],56:[2,46],57:[2,46],58:[2,46]},{1:[2,49],5:[2,49],8:[2,49],10:[2,49],12:[2,49],13:[2,49],14:[2,49],15:[2,49],16:[2,49],17:[2,49],18:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],31:[2,49],32:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],51:[2,49],53:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49]},{1:[2,52],5:[2,52],8:[2,52],10:[2,52],12:[2,52],13:[2,52],14:[2,52],15:[2,52],16:[2,52],17:[2,52],18:[2,52],19:[2,52],20:[2,52],21:[2,52],22:[2,52],23:[2,52],24:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],30:[2,52],31:[2,52],32:[2,52],33:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],53:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52]},{1:[2,56],5:[2,56],8:[2,56],10:[2,56],12:[2,56],13:[2,56],14:[2,56],15:[2,56],16:[2,56],17:[2,56],18:[2,56],19:[2,56],20:[2,56],21:[2,56],22:[2,56],23:[2,56],24:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],30:[2,56],31:[2,56],32:[2,56],33:[2,56],34:[2,56],35:[2,56],36:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],42:[2,56],43:[2,56],44:[2,56],45:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],51:[2,56],53:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56]},{1:[2,59],5:[2,59],8:[2,59],10:[2,59],12:[2,59],13:[2,59],14:[2,59],15:[2,59],16:[2,59],17:[2,59],18:[2,59],19:[2,59],20:[2,59],21:[2,59],22:[2,59],23:[2,59],24:[2,59],25:[2,59],26:[2,59],27:[2,59],28:[2,59],29:[2,59],30:[2,59],31:[2,59],32:[2,59],33:[2,59],34:[2,59],35:[2,59],36:[2,59],37:[2,59],38:[2,59],39:[2,59],40:[2,59],41:[2,59],42:[2,59],43:[2,59],44:[2,59],45:[2,59],46:[2,59],47:[2,59],48:[2,59],49:[2,59],50:[2,59],51:[2,59],53:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59]},{1:[2,62],5:[2,62],8:[2,62],10:[2,62],12:[2,62],13:[2,62],14:[2,62],15:[2,62],16:[2,62],17:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],23:[2,62],24:[2,62],25:[2,62],26:[2,62],27:[2,62],28:[2,62],29:[2,62],30:[2,62],31:[2,62],32:[2,62],33:[2,62],34:[2,62],35:[2,62],36:[2,62],37:[2,62],38:[2,62],39:[2,62],40:[2,62],41:[2,62],42:[2,62],43:[2,62],44:[2,62],45:[2,62],46:[2,62],47:[2,62],48:[2,62],49:[2,62],50:[2,62],51:[2,62],53:[2,62],55:[2,62],56:[2,62],57:[2,62],58:[2,62]},{1:[2,65],5:[2,65],8:[2,65],10:[2,65],12:[2,65],13:[2,65],14:[2,65],15:[2,65],16:[2,65],17:[2,65],18:[2,65],19:[2,65],20:[2,65],21:[2,65],22:[2,65],23:[2,65],24:[2,65],25:[2,65],26:[2,65],27:[2,65],28:[2,65],29:[2,65],30:[2,65],31:[2,65],32:[2,65],33:[2,65],34:[2,65],35:[2,65],36:[2,65],37:[2,65],38:[2,65],39:[2,65],40:[2,65],41:[2,65],42:[2,65],43:[2,65],44:[2,65],45:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],51:[2,65],53:[2,65],55:[2,65],56:[2,65],57:[2,65],58:[2,65]},{11:39,12:[1,8],13:[1,9],14:[1,10],16:[1,11],18:[1,12],19:[1,13],20:[1,14],21:[1,15],22:[1,16],23:[1,17],25:[1,18],27:[1,19],29:[1,20],31:[1,21],33:[1,22],35:[1,23],37:[1,24],39:[1,25],41:[1,26],42:[1,27],44:[1,28],46:[1,29],48:[1,30],50:[1,31],51:[1,32],53:[1,33],55:[1,93],56:[1,34],57:[1,35],58:[1,36]},{1:[2,70],5:[2,70],8:[2,70],10:[2,70],12:[2,70],13:[2,70],14:[2,70],15:[2,70],16:[2,70],17:[2,70],18:[2,70],19:[2,70],20:[2,70],21:[2,70],22:[2,70],23:[2,70],24:[2,70],25:[2,70],26:[2,70],27:[2,70],28:[2,70],29:[2,70],30:[2,70],31:[2,70],32:[2,70],33:[2,70],34:[2,70],35:[2,70],36:[2,70],37:[2,70],38:[2,70],39:[2,70],40:[2,70],41:[2,70],42:[2,70],43:[2,70],44:[2,70],45:[2,70],46:[2,70],47:[2,70],48:[2,70],49:[2,70],50:[2,70],51:[2,70],53:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70]},{1:[2,8],5:[2,8],8:[2,8],12:[2,8],13:[2,8],14:[2,8],16:[2,8],18:[2,8],19:[2,8],20:[2,8],21:[2,8],22:[2,8],23:[2,8],25:[2,8],27:[2,8],29:[2,8],31:[2,8],33:[2,8],35:[2,8],37:[2,8],39:[2,8],41:[2,8],42:[2,8],44:[2,8],46:[2,8],48:[2,8],50:[2,8],51:[2,8],53:[2,8],56:[2,8],57:[2,8],58:[2,8]},{1:[2,69],5:[2,69],8:[2,69],10:[2,69],12:[2,69],13:[2,69],14:[2,69],15:[2,69],16:[2,69],17:[2,69],18:[2,69],19:[2,69],20:[2,69],21:[2,69],22:[2,69],23:[2,69],24:[2,69],25:[2,69],26:[2,69],27:[2,69],28:[2,69],29:[2,69],30:[2,69],31:[2,69],32:[2,69],33:[2,69],34:[2,69],35:[2,69],36:[2,69],37:[2,69],38:[2,69],39:[2,69],40:[2,69],41:[2,69],42:[2,69],43:[2,69],44:[2,69],45:[2,69],46:[2,69],47:[2,69],48:[2,69],49:[2,69],50:[2,69],51:[2,69],53:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69]}],
defaultActions: {3:[2,3],37:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
 /* parser extensions */

//js additional module code
    parser.extend = {
        parser: function(extension) {
            if (extension) {
                for (var attr in extension) {
                    parser[attr] = extension[attr];
                }
            }
        },
        lexer: function() {
            if (extension) {
                for (var attr in extension) {
                    parser[attr] = extension[attr];
                }
            }
        }
    };
//
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 1:
    //js
        if (parser.npStack != true) return 12;
        lexer.popState();
        parser.npStack = false;
        yy_.yytext = parser.noParse(yy_.yytext);

    /*php
        if ($this->npStack != true) return 12;
        $this->popState();
        $this->npStack = false;
        $yy_.yytext = $this->noParse($yy_.yytext);
    */

    return 15;

break;
case 2:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('np');
        parser.npStack = true;

    /*php
        if ($this->isContent()) return 12;
        $this->begin('np');
        $this->npStack = true;
    */

    return 14;

break;
case 3:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 4:
    //js
        if (parser.ppStack != true) return 12;
        lexer.popState();
        parser.ppStack = false;
        yy_.yytext = parser.preFormattedText(yy_.yytext);

    /*php
        if ($this->ppStack != true) return 12;
        $this->popState();
        $this->ppStack = false;
        $yy_.yytext = $this->preFormattedText($yy_.yytext);
    */

    return 17;

break;
case 5:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('pp');
        parser.ppStack = true;

    /*php
        if ($this->isContent()) return 12;
        $this->begin('pp');
        $this->ppStack = true;
    */

    return 16;

break;
case 6:
    return 13;

break;
case 7:
    //js
        if (parser.isContent()) return 12;

    /*php
        if ($this->isContent()) return 12;
    */

    return 18;

break;
case 8:
    //js
        if (parser.isContent()) return 12;

    /*php
        if ($this->isContent()) return 12;
    */

    return 19;

break;
case 9:
    //js
        if (parser.isContent(['linkStack'])) return 12;

    /*php
        if ($this->isContent(array('linkStack'))) return 12;
    */

    return 20;

break;
case 10:
    return 58;

break;
case 11:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('preBlock');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('preBlock');
    */

    return 9;

break;
case 12:
    /*php
        $this->popState();
        return 52;
    */

break;
case 13:
    //js
        if (parser.isContent()) return 12;
        yy_.yytext = parser.inlinePlugin(yy_.yytext);

    /*php
        $this->begin('inlinePlugin');
    */

    return 51;

break;
case 14:
    /*php
        $this->popState();
        $this->begin('plugin');
        return 54;
    */

break;
case 15:
    //js
        if (parser.npStack || parser.ppStack) return 12;

        lexer.begin('pluginStart');
        yy.pluginStack = parser.stackPlugin(yy_.yytext, yy.pluginStack);

        if (parser.size(yy.pluginStack) == 1) {
            return 53;
        }

        return 12;

    /*php
        $this->begin('pluginStart');
        $this->stackPlugin($yy_.yytext);
        return 53;
    */

break;
case 16:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 17:
    //js
        var plugin = yy.pluginStack[yy.pluginStack.length - 1];
        if (('{' + plugin.name + '}') == yy_.yytext) {
            lexer.popState();
            if (yy.pluginStack) {
                if (
                    parser.size(yy.pluginStack) > 0 &&
                    parser.substring(yy_.yytext, 1, -1) == yy.pluginStack[parser.size(yy.pluginStack) - 1].name
                ) {
                    if (parser.size(yy.pluginStack) == 1) {
                        yy_.yytext = yy.pluginStack[parser.size(yy.pluginStack) - 1];
                        yy.pluginStack = parser.pop(yy.pluginStack);
                        return 55;
                    } else {
                        yy.pluginStack = parser.pop(yy.pluginStack);
                        return 12;
                    }
                }
            }
        }

    /*php
        $name = end($this->pluginStack);
        if (substr($yy_.yytext, 1, -1) == $name && $this->pluginStackCount > 0) {
            $this->popState();
            $this->pluginStackCount--;
            array_pop($this->pluginStack);
            return 55;
        }
    */

    return 12;

break;
case 18:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 19:
	/*php
		$this->popState();
		$this->begin('block');
		return 9;
	*/

break;
case 20:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */


    return 10;

break;
case 21:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('preBlock');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('preBlock');
    */

    return 8;

break;
case 22:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('preBlock');

    /*php
        $this->popState();
        if ($this->isContent()) return 12;
        $this->begin('preBlock');
    */

    return 8;

break;
case 23:
    //js
        if (parser.isContent() || parser.tableStack) return 12;

    /*php
        if ($this->isContent() || !empty($this->tableStack)) return 12;
    */

    return 56;

break;
case 24:
    //js
        if (parser.isContent()) return 12;

    /*php
        if ($this->isContent()) return 12;
    */

    return 22;

break;
case 25:
    //js
        if (parser.isContent()) return 12;

    /*php
        if ($this->isContent()) return 12;
    */

    return 57;

break;
case 26:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 27:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 24;

break;
case 28:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('bold');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('bold');
    */

    return 23;

break;
case 29:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 30:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 26;

break;
case 31:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('box');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('box');
    */

    return 25;

break;
case 32:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 33:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */


    return 28;

break;
case 34:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('center');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('center');
    */

    return 27;

break;
case 35:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 36:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 30;

break;
case 37:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('code');


    /*php
        if ($this->isContent()) return 12;
        $this->begin('code');
    */

    return 29;

break;
case 38:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 39:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 32;

break;
case 40:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('color');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('color');
    */

    return 31;

break;
case 41:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 42:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 34;

break;
case 43:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('italic');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('italic');
    */

    return 33;

break;
case 44:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 45:
    //js
        if (parser.isContent(['linkStack'])) return 12;
        lexer.popState();

    /*php
        if ($this->isContent(array('linkStack'))) return 12;
        $this->popState();
    */

    return 36;

break;
case 46:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('unlink');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('unlink');
    */

    return 35;

break;
case 47:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 48:
    //js
        if (parser.isContent(['linkStack'])) return 12;
        parser.linkStack = false;
        lexer.popState();

    /*php
        if ($this->isContent(array('linkStack'))) return 12;
        $this->linkStack = false;
        $this->popState();
    */

    return 38;

break;
case 49:
    //js
        if (parser.isContent()) return 12;
        parser.linkStack = true;
        lexer.begin('link');
        yy_.yytext = 'external';

    /*php
        if ($this->isContent()) return 12;
        $this->linkStack = true;
        $this->begin('link');
        $yy_.yytext = 'external';
    */

    return 37;

break;
case 50:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 51:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 40;

break;
case 52:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('strike');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('strike');
    */

    return 39;

break;
case 53:
    return 41;

break;
case 54:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 55:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();
        parser.tableStack.pop();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
        array_pop($this->tableStack);
    */

    return 43;

break;
case 56:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('table');
        parser.tableStack.push(true);

    /*php
        if ($this->isContent()) return 12;
        $this->begin('table');
        $this->tableStack[] = true;
    */

    return 42;

break;
case 57:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 58:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 45;

break;
case 59:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('titleBar');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('titleBar');
    */

    return 44;

break;
case 60:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 61:
    //js
        if (parser.isContent()) return 12;
        lexer.popState();

    /*php
        if ($this->isContent()) return 12;
        $this->popState();
    */

    return 47;

break;
case 62:
    //js
        if (parser.isContent()) return 12;
        lexer.begin('underscore');

    /*php
        if ($this->isContent()) return 12;
        $this->begin('underscore');
    */

    return 46;

break;
case 63:
    //js
        lexer.conditionStack = [];

    /*php
        $this->conditionStackCount = 0;
        $this->conditionStack = array();
    */

    return 5;

break;
case 64:
    //js
        if (parser.isContent(['linkStack'])) return 12;
        parser.linkStack = false;
        lexer.popState();

    /*php
        if ($this->isContent(array('linkStack'))) return 12;
        $this->linkStack = false;
        $this->popState();
    */

    return 49;

break;
case 65:
    //js
        if (parser.isContent()) return 12;
        parser.linkStack = true;
        lexer.begin('wikiLink');

    /*php
        if ($this->isContent()) return 12;
        $this->linkStack = true;
        $this->begin('wikiLink');
        $yy_.yytext = array('type' => 'wiki', 'syntax' => $yy_.yytext);
    */

    return 48;

break;
case 66:
    //js
        if (parser.isContent()) return 12;
        parser.linkStack = true;
        lexer.begin('wikiLink');

    /*php
        if ($this->isContent()) return 12;
        $this->linkStack = true;
        $this->begin('wikiLink');
        $yy_.yytext = array('type' => 'np', 'syntax' => $yy_.yytext);
    */

    return 48;

break;
case 67:
    //js
        if (parser.isContent()) return 12;
        parser.linkStack = true;
        lexer.begin('wikiLink');

    /*php
        if ($this->isContent()) return 12;
        $this->linkStack = true;
        $this->begin('wikiLink');
        $yy_.yytext = array('syntax' => $yy_.yytext, 'type' => substr($yy_.yytext, 1, -1));
    */

    return 48;

break;
case 68:
    //js
        if (parser.isContent()) return 12;

    /*php
        if ($this->isContent()) return 12;
    */

    return 50;

break;
case 69:
    return 58;

break;
case 70:
    //js
        return 21;

    /*php
        if (Utilities\Html::isTag($yy_.yytext)) {
            return 21;
        }
        $tag = $yy_.yytext;
        $yy_.yytext = $yy_.yytext{0};
        $this->unput(substr($tag, 1));
        return 12;
    */

break;
case 71:/*skip REAL_EOF*/
break;
case 72:return 21;
break;
case 73:return 12;
break;
case 74:return 12;
break;
case 75:return 12;
break;
case 76:return 12;
break;
case 77:return 12;
break;
case 78:return 58;
break;
case 79:return 58;
break;
case 80:return 58;
break;
case 81:return 58;
break;
case 82:return 58;
break;
case 83:return 58;
break;
case 84:return 58;
break;
case 85:return 58;
break;
case 86:return 58;
break;
case 87:return 58;
break;
case 88:return 58;
break;
case 89:return 58;
break;
case 90:return 58;
break;
case 91:return 12;
break;
case 92:return 5;
break;
}
},
rules: [/^(?:$)/,/^(?:~\/np~)/,/^(?:~np~)/,/^(?:$)/,/^(?:~\/pp~)/,/^(?:~pp~)/,/^(?:~tc~((.|\n)+)~\/tc~)/,/^(?:[%][%](([0-9A-Za-z ]{3,}))[%][%])/,/^(?:[%](([0-9A-Za-z ]{3,}))[%])/,/^(?:\{\{(([0-9A-Za-z ]{3,}))([|](([0-9A-Za-z ]{3,})))?\}\})/,/^(?:\{rm\})/,/^(?:((\n))(\{r2l\}|\{l2r\}))/,/^(?:(.+?\}|\}))/,/^(?:\{([a-z_]+))/,/^(?:.*?\)\})/,/^(?:\{([A-Z_]+)\()/,/^(?:$)/,/^(?:\{([A-Z_]+)\})/,/^(?:$)/,/^(?:(([\!*#+;]+)))/,/^(?:(?=((\n))))/,/^(?:((\n))(?=(([\!*#+;]+))))/,/^(?:(?=(([\!*#+;]+))))/,/^(?:((\n)))/,/^(?:---)/,/^(?:%%%)/,/^(?:$)/,/^(?:[_][_])/,/^(?:[_][_])/,/^(?:$)/,/^(?:[\^])/,/^(?:[\^])/,/^(?:$)/,/^(?:[:][:])/,/^(?:[:][:])/,/^(?:$)/,/^(?:\+-)/,/^(?:-\+)/,/^(?:$)/,/^(?:[\~][\~])/,/^(?:[\~][\~])/,/^(?:$)/,/^(?:[']['])/,/^(?:[']['])/,/^(?:$)/,/^(?:(@np|\]\]|\]))/,/^(?:\[\[)/,/^(?:$)/,/^(?:\])/,/^(?:\[(?![ ]))/,/^(?:$)/,/^(?:[-][-])/,/^(?:[-][-](?![ ]|$))/,/^(?:[ ][-][-][ ])/,/^(?:$)/,/^(?:[|][|])/,/^(?:[|][|])/,/^(?:$)/,/^(?:[=][-])/,/^(?:[-][=])/,/^(?:$)/,/^(?:[=][=][=])/,/^(?:[=][=][=])/,/^(?:$)/,/^(?:\)\)|\(\()/,/^(?:\(\()/,/^(?:\)\))/,/^(?:\(((([a-z0-9-]+)))\()/,/^(?:(?:[ \n\t\r\,\;]|^)(([A-Z]{1,}[a-z_\-\x80-\xFF]{1,}){2,})(?=$|[ \n\t\r\,\;\.]))/,/^(?:&)/,/^(?:[<](.|\n)*?[>])/,/^(?:≤REAL_EOF≥)/,/^(?:≤REAL_LT≥(.|\n)*?≤REAL_GT≥)/,/^(?:(§[a-z0-9]{32}§))/,/^(?:(≤(.)+≥))/,/^(?:([A-Za-z0-9 .,?;]+))/,/^(?:(?!([{}\n_\^:\~'-|=\(\)\[\]*#+%<≤]))(((.?)))?(?=([{}\n_\^:\~'-|=\(\)\[\]*#+%<≤])))/,/^(?:([ ]+?))/,/^(?:(~bs~|~BS~))/,/^(?:(~hs~|~HS~))/,/^(?:(~amp~|~amp~))/,/^(?:(~ldq~|~LDQ~))/,/^(?:(~rdq~|~RDQ~))/,/^(?:(~lsq~|~LSQ~))/,/^(?:(~rsq~|~RSQ~))/,/^(?:(~c~|~C~))/,/^(?:~--~)/,/^(?:=>)/,/^(?:(~lt~|~LT~))/,/^(?:(~gt~|~GT~))/,/^(?:\{([0-9]+)\})/,/^(?:(.))/,/^(?:$)/],
conditions: {"BOF":{"rules":[2,5,6,7,8,9,10,11,13,15,21,22,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"np":{"rules":[0,1,2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"pp":{"rules":[2,3,4,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"pluginStart":{"rules":[2,5,6,7,8,9,10,11,13,14,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"plugin":{"rules":[2,5,6,7,8,9,10,11,13,15,16,17,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"inlinePlugin":{"rules":[2,5,6,7,8,9,10,11,12,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"line":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"preBlock":{"rules":[2,5,6,7,8,9,10,11,13,15,19,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"block":{"rules":[2,5,6,7,8,9,10,11,13,15,18,20,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"preBlockEnd":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"bold":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,26,27,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"box":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,29,30,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"center":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,32,33,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"code":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,35,36,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"color":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,38,39,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"italic":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,41,42,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"unlink":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,44,45,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"link":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,47,48,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"strike":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,50,51,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"table":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,54,55,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"titleBar":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,57,58,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"underscore":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"wikiLink":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"INITIAL":{"rules":[2,5,6,7,8,9,10,11,13,15,21,23,24,25,28,31,34,37,40,43,46,49,52,53,56,59,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Definition;
exports.Parser = Definition.Parser;
exports.parse = function () { return Definition.parse.apply(Definition, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}